/** @generated by @calimero/abi-codegen — DO NOT EDIT. */

// Mock types for compile test
type CalimeroApp = any;
type Context = any;

import * as Types from "./types.js";

// Include types directly for compile test
/** @generated by @calimero/abi-codegen — DO NOT EDIT. */

export interface AbiState {
  counters: Record<string, number>;
  users: UserId32[];
}

export type ActionPayload =
  | { name: 'Ping' }
  | { name: 'SetName'; payload: string }
  | { name: 'Update'; payload: UpdatePayload }

export const Action = {
  Ping: (): ActionPayload => ({ name: 'Ping' }),
  SetName: (setname: string): ActionPayload => ({ name: 'SetName', payload: setname }),
  Update: (update: UpdatePayload): ActionPayload => ({ name: 'Update', payload: update }),
} as const;

export type ConformanceErrorPayload =
  | { name: 'BadInput' }
  | { name: 'NotFound'; payload: string }

export const ConformanceError = {
  BadInput: (): ConformanceErrorPayload => ({ name: 'BadInput' }),
  NotFound: (notfound: string): ConformanceErrorPayload => ({ name: 'NotFound', payload: notfound }),
} as const;

/** Fixed-length bytes (size: 64). Represented as string at runtime. */
export type Hash64 = string;

export interface Person {
  id: UserId32;
  name: string;
  age: number;
}

export interface Profile {
  bio: string | null;
  avatar: string | null;
  nicknames: string[];
}

/** Fixed-length bytes (size: 32). Represented as string at runtime. */
export type UserId32 = string;

export interface UpdatePayload {
  age: number;
}

export type may_failErrorCode = "BAD_INPUT" | "NOT_FOUND";
export type may_failError = { code: may_failErrorCode } & (
  | { code: "BAD_INPUT" }
  | { code: "NOT_FOUND"; payload: string }
);

export type find_personErrorCode = "BAD_INPUT" | "NOT_FOUND";
export type find_personError = { code: find_personErrorCode } & (
  | { code: "BAD_INPUT" }
  | { code: "NOT_FOUND"; payload: string }
);


export type NamedPayload = string;

export type DataPayload = Uint8Array;

export type PersonUpdatedPayload = string;

export type ActionTakenPayload = string;

export type AbiEvent =
  | { name: "Ping" }
  | { name: "Named"; payload: string }
  | { name: "Data"; payload: Uint8Array }
  | { name: "PersonUpdated"; payload: string }
  | { name: "ActionTaken"; payload: string }
;


export class Client {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<Types.AbiState> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as Types.AbiState;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * noop
   */
  public async noop(): Promise<void> {
    const response = await this.app.execute(this.context, 'noop', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_bool
   */
  public async echoBool(params: { b: boolean }): Promise<boolean> {
    const response = await this.app.execute(this.context, 'echo_bool', params);
    if (response.success) {
      return response.result as boolean;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_i32
   */
  public async echoI32(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_i32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_i64
   */
  public async echoI64(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_i64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_u32
   */
  public async echoU32(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_u32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_u64
   */
  public async echoU64(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_u64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_f32
   */
  public async echoF32(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_f32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_f64
   */
  public async echoF64(params: { v: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_f64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_string
   */
  public async echoString(params: { s: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'echo_string', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_bytes
   */
  public async echoBytes(params: { b: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'echo_bytes', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_u32
   */
  public async optU32(params: { x: number | null }): Promise<number | null> {
    const response = await this.app.execute(this.context, 'opt_u32', params);
    if (response.success) {
      return response.result as number | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_string
   */
  public async optString(params: { x: string | null }): Promise<string | null> {
    const response = await this.app.execute(this.context, 'opt_string', params);
    if (response.success) {
      return response.result as string | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_record
   */
  public async optRecord(params: { p: Types.Person | null }): Promise<Types.Person | null> {
    const response = await this.app.execute(this.context, 'opt_record', params);
    if (response.success) {
      return response.result as Types.Person | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_id
   */
  public async optId(params: { x: string | null }): Promise<string | null> {
    const response = await this.app.execute(this.context, 'opt_id', params);
    if (response.success) {
      return response.result as string | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_u32
   */
  public async listU32(params: { xs: number[] }): Promise<number[]> {
    const response = await this.app.execute(this.context, 'list_u32', params);
    if (response.success) {
      return response.result as number[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_strings
   */
  public async listStrings(params: { xs: string[] }): Promise<string[]> {
    const response = await this.app.execute(this.context, 'list_strings', params);
    if (response.success) {
      return response.result as string[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_records
   */
  public async listRecords(params: { ps: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'list_records', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_ids
   */
  public async listIds(params: { xs: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'list_ids', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_u32
   */
  public async mapU32(params: { m: Record<string, number> }): Promise<Record<string, number>> {
    const response = await this.app.execute(this.context, 'map_u32', params);
    if (response.success) {
      return response.result as Record<string, number>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_list_u32
   */
  public async mapListU32(params: { m: Record<string, number[]> }): Promise<Record<string, number[]>> {
    const response = await this.app.execute(this.context, 'map_list_u32', params);
    if (response.success) {
      return response.result as Record<string, number[]>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_record
   */
  public async mapRecord(params: { m: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'map_record', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * make_person
   */
  public async makePerson(params: { p: Types.Person }): Promise<Types.Person> {
    const response = await this.app.execute(this.context, 'make_person', params);
    if (response.success) {
      return response.result as Types.Person;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * profile_roundtrip
   */
  public async profileRoundtrip(params: { p: Types.Profile }): Promise<Types.Profile> {
    const response = await this.app.execute(this.context, 'profile_roundtrip', params);
    if (response.success) {
      return response.result as Types.Profile;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * act
   */
  public async act(params: { a: Types.ActionPayload }): Promise<number> {
    const response = await this.app.execute(this.context, 'act', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_id
   */
  public async roundtripId(params: { x: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'roundtrip_id', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_hash
   */
  public async roundtripHash(params: { h: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'roundtrip_hash', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * may_fail
   *
   * @throws {Types.may_failError} May throw the following errors:
   * - BAD_INPUT
   * - NOT_FOUND: string
   */
  public async mayFail(params: { flag: boolean }): Promise<number> {
    const response = await this.app.execute(this.context, 'may_fail', params);
    if (response.success) {
      return response.result as number;
    } else {
      // Parse the error response to match the expected error type
      if (response.error && typeof response.error === 'object') {
        throw response.error as Types.may_failError;
      } else {
        throw new Error(response.error || 'Execution failed');
      }
    }
  }

  /**
   * find_person
   *
   * @throws {Types.find_personError} May throw the following errors:
   * - BAD_INPUT
   * - NOT_FOUND: string
   */
  public async findPerson(params: { name: string }): Promise<Types.Person> {
    const response = await this.app.execute(this.context, 'find_person', params);
    if (response.success) {
      return response.result as Types.Person;
    } else {
      // Parse the error response to match the expected error type
      if (response.error && typeof response.error === 'object') {
        throw response.error as Types.find_personError;
      } else {
        throw new Error(response.error || 'Execution failed');
      }
    }
  }

}
// Test stub to verify parameter structure
const app = { execute: async (_c: any, _m: string, _p?: Record<string, unknown>) => ({ success: true, result: null }) } as any;
const ctx = {} as any;
const client = new Client(app, ctx);
await client.roundtripId({ x: "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef" });
await client.makePerson({ p: { id: "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef" as any, name: "test", age: 25 } });
await client.act({ a: Action.Ping() });
