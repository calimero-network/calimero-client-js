// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Codegen > client.ts generation > should generate client.ts with correct structure 1`] = `
"/** @generated by @calimero/abi-codegen — DO NOT EDIT. */

import {
  CalimeroApp,
  Context,
  ExecutionResponse,
} from '@calimero-network/calimero-client';

export * from "./types";

export class TestClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * opt_u32
   */
  public async optU32(params: { value: number | null }): Promise<number | null> {
    const response = await this.app.execute(this.context, 'opt_u32', params);
    if (response.success) {
      return response.result as number | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_u32
   */
  public async listU32(params: { values: number[] }): Promise<number[]> {
    const response = await this.app.execute(this.context, 'list_u32', params);
    if (response.success) {
      return response.result as number[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_u32
   */
  public async mapU32(params: { data: Record<string, number> }): Promise<Record<string, number>> {
    const response = await this.app.execute(this.context, 'map_u32', params);
    if (response.success) {
      return response.result as Record<string, number>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * make_person
   *
   * @throws {Error} May throw the following errors:
   * - INVALID_AGE: string
   * - NAME_TOO_LONG
   */
  public async makePerson(params: { name: string; age: number; email: string | null }): Promise<Person> {
    const response = await this.app.execute(this.context, 'make_person', params);
    if (response.success) {
      return response.result as Person;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * profile_roundtrip
   */
  public async profileRoundtrip(params: { profile: Profile }): Promise<Profile> {
    const response = await this.app.execute(this.context, 'profile_roundtrip', params);
    if (response.success) {
      return response.result as Profile;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * act
   *
   * @throws {Error} May throw the following errors:
   * - ACTION_FAILED: ConformanceError
   */
  public async act(params: { action: Action }): Promise<void> {
    const response = await this.app.execute(this.context, 'act', params);
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_id
   */
  public async roundtripId(params: { id: UserId32 }): Promise<UserId32> {
    const response = await this.app.execute(this.context, 'roundtrip_id', params);
    if (response.success) {
      return response.result as UserId32;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_hash
   */
  public async roundtripHash(params: { hash: Hash64 }): Promise<Hash64> {
    const response = await this.app.execute(this.context, 'roundtrip_hash', params);
    if (response.success) {
      return response.result as Hash64;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * may_fail
   *
   * @throws {Error} May throw the following errors:
   * - INTENTIONAL_FAILURE: string
   */
  public async mayFail(params: { should_fail: boolean }): Promise<string> {
    const response = await this.app.execute(this.context, 'may_fail', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * find_person
   *
   * @throws {Error} May throw the following errors:
   * - PERSON_NOT_FOUND: ConformanceError
   */
  public async findPerson(params: { id: UserId32 }): Promise<Person | null> {
    const response = await this.app.execute(this.context, 'find_person', params);
    if (response.success) {
      return response.result as Person | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

}"
`;

exports[`Codegen > types.ts generation > should generate types.ts with correct structure 1`] = `
"/** @generated by @calimero/abi-codegen — DO NOT EDIT. */

export interface AbiState {
  counter: number;
  last_updated: number;
  active: boolean;
}

export interface Person {
  id: UserId32;
  name: string;
  age: number;
  email: string | null;
  profile: Profile;
}

export interface Profile {
  bio: string | null;
  avatar_hash: Hash64;
  preferences: Record<string, string>;
}

export type Action =
  | { kind: "Create"; payload: Person }
  | { kind: "Update"; payload: { id: UserId32; changes: string } }
  | { kind: "Delete"; payload: UserId32 }

export type ConformanceError =
  | { kind: "NotFound"; payload: { resource: string; id: string } }
  | { kind: "InvalidInput"; payload: string }
  | { kind: "InternalError" }

/** Fixed-length bytes (size: 32). Represented as Uint8Array at runtime. */
export type UserId32 = Uint8Array;

/** Fixed-length bytes (size: 64). Represented as Uint8Array at runtime. */
export type Hash64 = Uint8Array;

export type make_personErrorCode = "INVALID_AGE" | "NAME_TOO_LONG";
export type make_personError = { code: make_personErrorCode } & (
  | { code: "INVALID_AGE"; payload: string }
  | { code: "NAME_TOO_LONG" }
);

export type actErrorCode = "ACTION_FAILED";
export type actError = { code: actErrorCode } & (
  | { code: "ACTION_FAILED"; payload: ConformanceError }
);

export type may_failErrorCode = "INTENTIONAL_FAILURE";
export type may_failError = { code: may_failErrorCode } & (
  | { code: "INTENTIONAL_FAILURE"; payload: string }
);

export type find_personErrorCode = "PERSON_NOT_FOUND";
export type find_personError = { code: find_personErrorCode } & (
  | { code: "PERSON_NOT_FOUND"; payload: ConformanceError }
);


export type NamedPayload = string;

export type DataPayload = Uint8Array;

export type PersonUpdatedPayload = { person: Person; timestamp: number };

export type ActionTakenPayload = { action: Action; actor: UserId32; success: boolean };

export type AbiEvent =
  | { name: "Ping" }
  | { name: "Named"; payload: string }
  | { name: "Data"; payload: Uint8Array }
  | { name: "PersonUpdated"; payload: { person: Person; timestamp: number } }
  | { name: "ActionTaken"; payload: { action: Action; actor: UserId32; success: boolean } }
;
"
`;
