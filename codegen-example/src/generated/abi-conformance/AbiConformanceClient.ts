/** @generated by @calimero/abi-codegen â€” DO NOT EDIT. */

import { CalimeroApp, Context } from '@calimero-network/calimero-client';

// Generated types

export interface AbiState {
  counters: Record<string, number>;
  users: UserId32[];
}

export type ActionPayload =
  | { name: 'Ping' }
  | { name: 'SetName'; payload: string }
  | { name: 'Update'; payload: UpdatePayload };

export const Action = {
  Ping: (): ActionPayload => ({ name: 'Ping' }),
  SetName: (setname: string): ActionPayload => ({
    name: 'SetName',
    payload: setname,
  }),
  Update: (update: UpdatePayload): ActionPayload => ({
    name: 'Update',
    payload: update,
  }),
} as const;

export type ConformanceErrorPayload =
  | { name: 'BadInput' }
  | { name: 'NotFound'; payload: string };

export const ConformanceError = {
  BadInput: (): ConformanceErrorPayload => ({ name: 'BadInput' }),
  NotFound: (notfound: string): ConformanceErrorPayload => ({
    name: 'NotFound',
    payload: notfound,
  }),
} as const;

export type Hash64 = CalimeroBytes;

export interface Person {
  id: UserId32;
  name: string;
  age: number;
}

export interface Profile {
  bio: string | null;
  avatar: CalimeroBytes | null;
  nicknames: string[];
}

export interface UpdatePayload {
  age: number;
}

export type UserId32 = CalimeroBytes;

export type NamedPayload = string;

export type DataPayload = CalimeroBytes;

export type AbiEvent =
  | { name: 'Ping' }
  | { name: 'Named'; payload: string }
  | { name: 'Data'; payload: CalimeroBytes }
  | { name: 'PersonUpdated'; payload: Person }
  | { name: 'ActionTaken'; payload: ActionPayload };

/**
 * Utility class for handling byte conversions in Calimero
 */
export class CalimeroBytes {
  private data: Uint8Array;

  constructor(input: string | number[] | Uint8Array) {
    if (typeof input === 'string') {
      // Hex string
      this.data = new Uint8Array(
        input.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || [],
      );
    } else if (Array.isArray(input)) {
      // Number array
      this.data = new Uint8Array(input);
    } else {
      // Uint8Array
      this.data = input;
    }
  }

  toArray(): number[] {
    return Array.from(this.data);
  }

  toUint8Array(): Uint8Array {
    return this.data;
  }

  static fromHex(hex: string): CalimeroBytes {
    return new CalimeroBytes(hex);
  }

  static fromArray(arr: number[]): CalimeroBytes {
    return new CalimeroBytes(arr);
  }

  static fromUint8Array(bytes: Uint8Array): CalimeroBytes {
    return new CalimeroBytes(bytes);
  }
}

/**
 * Convert CalimeroBytes instances to arrays for WASM compatibility
 */
function convertCalimeroBytesForWasm(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj instanceof CalimeroBytes) {
    return obj.toArray();
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => convertCalimeroBytesForWasm(item));
  }

  if (typeof obj === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertCalimeroBytesForWasm(value);
    }
    return result;
  }

  return obj;
}

/**
 * Convert arrays back to CalimeroBytes instances from WASM responses
 */
function convertWasmResultToCalimeroBytes(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (Array.isArray(obj) && obj.every((item) => typeof item === 'number')) {
    return new CalimeroBytes(obj);
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => convertWasmResultToCalimeroBytes(item));
  }

  if (typeof obj === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertWasmResultToCalimeroBytes(value);
    }
    return result;
  }

  return obj;
}

export class AbiConformanceClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<AbiState> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as AbiState;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * noop
   */
  public async noop(): Promise<void> {
    const response = await this.app.execute(this.context, 'noop', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_bool
   */
  public async echoBool(params: { b: boolean }): Promise<boolean> {
    const response = await this.app.execute(this.context, 'echo_bool', params);
    if (response.success) {
      return response.result as boolean;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_i32
   */
  public async echoI32(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_i32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_i64
   */
  public async echoI64(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_i64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_u32
   */
  public async echoU32(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_u32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_u64
   */
  public async echoU64(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_u64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_f32
   */
  public async echoF32(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_f32', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_f64
   */
  public async echoF64(params: { x: number }): Promise<number> {
    const response = await this.app.execute(this.context, 'echo_f64', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_string
   */
  public async echoString(params: { s: string }): Promise<string> {
    const response = await this.app.execute(
      this.context,
      'echo_string',
      params,
    );
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * echo_bytes
   */
  public async echoBytes(params: { b: CalimeroBytes }): Promise<CalimeroBytes> {
    const response = await this.app.execute(
      this.context,
      'echo_bytes',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as CalimeroBytes;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_u32
   */
  public async optU32(params: { x: number | null }): Promise<number | null> {
    const response = await this.app.execute(this.context, 'opt_u32', params);
    if (response.success) {
      return response.result as number | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_string
   */
  public async optString(params: { x: string | null }): Promise<string | null> {
    const response = await this.app.execute(this.context, 'opt_string', params);
    if (response.success) {
      return response.result as string | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_record
   */
  public async optRecord(params: { p: Person | null }): Promise<Person | null> {
    const response = await this.app.execute(
      this.context,
      'opt_record',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Person | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * opt_id
   */
  public async optId(params: { x: UserId32 | null }): Promise<UserId32 | null> {
    const response = await this.app.execute(
      this.context,
      'opt_id',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(
        response.result,
      ) as UserId32 | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_u32
   */
  public async listU32(params: { xs: number[] }): Promise<number[]> {
    const response = await this.app.execute(this.context, 'list_u32', params);
    if (response.success) {
      return response.result as number[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_strings
   */
  public async listStrings(params: { xs: string[] }): Promise<string[]> {
    const response = await this.app.execute(
      this.context,
      'list_strings',
      params,
    );
    if (response.success) {
      return response.result as string[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_records
   */
  public async listRecords(params: { ps: Person[] }): Promise<Person[]> {
    const response = await this.app.execute(
      this.context,
      'list_records',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Person[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * list_ids
   */
  public async listIds(params: { xs: UserId32[] }): Promise<UserId32[]> {
    const response = await this.app.execute(
      this.context,
      'list_ids',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as UserId32[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_u32
   */
  public async mapU32(params: {
    m: Record<string, number>;
  }): Promise<Record<string, number>> {
    const response = await this.app.execute(this.context, 'map_u32', params);
    if (response.success) {
      return response.result as Record<string, number>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_list_u32
   */
  public async mapListU32(params: {
    m: Record<string, number[]>;
  }): Promise<Record<string, number[]>> {
    const response = await this.app.execute(
      this.context,
      'map_list_u32',
      params,
    );
    if (response.success) {
      return response.result as Record<string, number[]>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * map_record
   */
  public async mapRecord(params: {
    m: Record<string, Person>;
  }): Promise<Record<string, Person>> {
    const response = await this.app.execute(
      this.context,
      'map_record',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Record<
        string,
        Person
      >;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * make_person
   */
  public async makePerson(params: { p: Person }): Promise<Person> {
    const response = await this.app.execute(
      this.context,
      'make_person',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Person;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * profile_roundtrip
   */
  public async profileRoundtrip(params: { p: Profile }): Promise<Profile> {
    const response = await this.app.execute(
      this.context,
      'profile_roundtrip',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Profile;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * act
   */
  public async act(params: { a: ActionPayload }): Promise<number> {
    // Convert Action variant to WASM format
    const convertedParams = { ...params } as any;
    if (
      convertedParams.a &&
      typeof convertedParams.a === 'object' &&
      'name' in convertedParams.a
    ) {
      if ('payload' in convertedParams.a) {
        convertedParams.a = {
          [convertedParams.a.name]: convertedParams.a.payload,
        };
      } else {
        convertedParams.a = convertedParams.a.name;
      }
    }
    const response = await this.app.execute(
      this.context,
      'act',
      convertedParams,
    );
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_id
   */
  public async roundtripId(params: { x: UserId32 }): Promise<UserId32> {
    const response = await this.app.execute(
      this.context,
      'roundtrip_id',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as UserId32;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * roundtrip_hash
   */
  public async roundtripHash(params: { h: Hash64 }): Promise<Hash64> {
    const response = await this.app.execute(
      this.context,
      'roundtrip_hash',
      convertCalimeroBytesForWasm(params),
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Hash64;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * may_fail
   */
  public async mayFail(params: { flag: boolean }): Promise<number> {
    const response = await this.app.execute(this.context, 'may_fail', params);
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * find_person
   */
  public async findPerson(params: { name: string }): Promise<Person> {
    const response = await this.app.execute(
      this.context,
      'find_person',
      params,
    );
    if (response.success) {
      return convertWasmResultToCalimeroBytes(response.result) as Person;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }
}
