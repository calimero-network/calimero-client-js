/* eslint-disable */
// Auto-generated by calimero-sdk-codegen. Do not edit.

import { CalimeroApp, Context } from '@calimero-network/calimero-client';

export class ContractClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  public async init(): Promise<any> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as any;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  public async set(params: { key: string; value: string }): Promise<void> {
    const response = await this.app.execute(this.context, 'set', params);
    if (response.success) {
      return;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  public async entries(): Promise<Map<string, string>> {
    const response = await this.app.execute(this.context, 'entries', {});
    if (response.success) {
      return response.result as Map<string, string>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  public async len(): Promise<number> {
    const response = await this.app.execute(this.context, 'len', {});
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  public async get(params: { key: string }): Promise<string | null> {
    const response = await this.app.execute(this.context, 'get', params);
    if (response.success) {
      return response.result as string | null;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

}
